{"ast":null,"code":"var _jsxFileName = \"/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/canvas/components/sfera.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useThree } from \"@react-three/fiber\";\nimport { useRotation } from \"../../../hooks/useRotation\";\nimport { useSpring, a } from \"@react-spring/three\";\nimport { useGesture } from \"react-use-gesture\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Sfera = ({\n  radius,\n  widthSegments,\n  heightSegments,\n  color,\n  position,\n  children,\n  hasRotation = false\n}) => {\n  _s();\n\n  const myObject = useRef();\n  useRotation(myObject, false, true, false, hasRotation);\n  const {\n    size,\n    viewport\n  } = useThree();\n  const aspect = size.width / viewport.width;\n  const [spring, set] = useSpring(() => ({\n    scale: [1, 1, 1],\n    position: position,\n    rotation: [0, 0, 0],\n    config: {\n      friction: 10\n    }\n  }));\n  const bind = useGesture({\n    onDrag: ({\n      offset: [x, y]\n    }) => set({\n      position: [x / aspect, 0, -y / aspect],\n      rotation: [y / aspect, x / aspect, 0]\n    }),\n    onHover: ({\n      hovering\n    }) => set({\n      scale: hovering ? [1.2, 1.2, 1.2] : [1, 1, 1]\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(a.mesh, {\n    ref: myObject,\n    ...bind(),\n    ...spring,\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [radius, widthSegments, heightSegments]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), children === undefined ? /*#__PURE__*/_jsxDEV(\"mesh\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 44\n    }, this) : children.map(child => {\n      return child;\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sfera, \"S31ZQw091hL6owzP/cLeo52OG1U=\", false, function () {\n  return [useRotation, useThree, useSpring, useGesture];\n});\n\n_c = Sfera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sfera\");","map":{"version":3,"sources":["/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/canvas/components/sfera.tsx"],"names":["React","useRef","useThree","useRotation","useSpring","a","useGesture","Sfera","radius","widthSegments","heightSegments","color","position","children","hasRotation","myObject","size","viewport","aspect","width","spring","set","scale","rotation","config","friction","bind","onDrag","offset","x","y","onHover","hovering","undefined","map","child"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,SAA8BC,QAA9B,QAA6C,oBAA7C;AACA,SAAQC,WAAR,QAA0B,4BAA1B;AAEA,SAAQC,SAAR,EAAmBC,CAAnB,QAA2B,qBAA3B;AACA,SAAiBC,UAAjB,QAAkC,mBAAlC;;AAYA,OAAO,MAAMC,KAA2B,GAAG,CACvC;AAACC,EAAAA,MAAD;AAAQC,EAAAA,aAAR;AAAsBC,EAAAA,cAAtB;AAAsCC,EAAAA,KAAtC;AAA6CC,EAAAA,QAA7C;AAAuDC,EAAAA,QAAvD;AAAiEC,EAAAA,WAAW,GAAG;AAA/E,CADuC,KAErC;AAAA;;AACF,QAAMC,QAAQ,GAAGd,MAAM,EAAvB;AAEAE,EAAAA,WAAW,CAACY,QAAD,EAAW,KAAX,EAAkB,IAAlB,EAAwB,KAAxB,EAA+BD,WAA/B,CAAX;AAEA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBf,QAAQ,EAAnC;AACA,QAAMgB,MAAM,GAAGF,IAAI,CAACG,KAAL,GAAaF,QAAQ,CAACE,KAArC;AACA,QAAM,CAACC,MAAD,EAASC,GAAT,IAAgBjB,SAAS,CAAC,OAAO;AAAEkB,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT;AAAoBV,IAAAA,QAAQ,EAAEA,QAA9B;AAAwCW,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlD;AAA6DC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ;AAArE,GAAP,CAAD,CAA/B;AACA,QAAMC,IAAqB,GAAGpB,UAAU,CAAC;AACrCqB,IAAAA,MAAM,EAAE,CAAC;AAAEC,MAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ;AAAV,KAAD,KAAwBT,GAAG,CAAC;AAAET,MAAAA,QAAQ,EAAE,CAACiB,CAAC,GAAGX,MAAL,EAAa,CAAb,EAAgB,CAACY,CAAD,GAAKZ,MAArB,CAAZ;AAA0CK,MAAAA,QAAQ,EAAE,CAACO,CAAC,GAAGZ,MAAL,EAAaW,CAAC,GAAGX,MAAjB,EAAyB,CAAzB;AAApD,KAAD,CADE;AAErCa,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkBX,GAAG,CAAC;AAAEC,MAAAA,KAAK,EAAEU,QAAQ,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAtC,KAAD;AAFO,GAAD,CAAxC;AAKA,sBAEI,QAAC,CAAD,CAAG,IAAH;AAAQ,IAAA,GAAG,EAAEjB,QAAb;AAAA,OAA2BW,IAAI,EAA/B;AAAA,OAAuCN,MAAvC;AAAA,4BACI;AAAgB,MAAA,IAAI,EAAE,CAACZ,MAAD,EAAQC,aAAR,EAAsBC,cAAtB;AAAtB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAkB,MAAA,KAAK,EAAEC;AAAzB;AAAA;AAAA;AAAA;AAAA,YAFJ,EAISE,QAAQ,KAAKoB,SAAd,gBAA2B;AAAA;AAAA;AAAA;AAAA,YAA3B,GAA2CpB,QAAQ,CAACqB,GAAT,CAAaC,KAAK,IAAI;AACjE,aAAOA,KAAP;AACH,KAF8C,CAJnD;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAYH,CA3BM;;GAAM5B,K;UAKTJ,W,EAE2BD,Q,EAELE,S,EACQE,U;;;KAVrBC,K","sourcesContent":["import React, {useRef} from 'react';\nimport {ThreeEvent, useFrame, useThree} from \"@react-three/fiber\";\nimport {useRotation} from \"../../../hooks/useRotation\";\nimport {map} from \"react-three-gui/dist/utils\";\nimport {useSpring, a} from \"@react-spring/three\";\nimport {useDrag, useGesture} from \"react-use-gesture\";\n\ninterface SferaProps {\n    radius: number,\n    widthSegments: number,\n    heightSegments: number,\n    color: string,\n    position?: number[],\n    hasRotation?: boolean ,\n    children?: JSX.Element[]\n}\n\nexport const Sfera: React.FC<SferaProps> = (\n    {radius,widthSegments,heightSegments, color, position, children, hasRotation = false }\n)  => {\n    const myObject = useRef<any>();\n\n    useRotation(myObject, false, true, false, hasRotation)\n\n    const { size, viewport } = useThree()\n    const aspect = size.width / viewport.width\n    const [spring, set] = useSpring(() => ({ scale: [1, 1, 1], position: position, rotation: [0, 0, 0], config: { friction: 10 } }))\n    const bind: ThreeEvent<any> = useGesture({\n        onDrag: ({ offset: [x, y] }) => set({ position: [x / aspect, 0, -y / aspect], rotation: [y / aspect, x / aspect, 0] }),\n        onHover: ({ hovering }) => set({ scale: hovering ? [1.2, 1.2, 1.2] : [1, 1, 1] })\n    })\n\n    return(\n\n        <a.mesh ref={myObject} {...bind()} {...spring}>\n            <sphereGeometry args={[radius,widthSegments,heightSegments]}/>\n            <meshToonMaterial color={color}/>\n            {\n                (children === undefined) ? <mesh></mesh> : children.map(child => {\n                return child;\n            })}\n        </a.mesh>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}