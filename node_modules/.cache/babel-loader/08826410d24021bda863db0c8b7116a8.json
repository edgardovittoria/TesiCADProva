{"ast":null,"code":"var _jsxFileName = \"/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/sfera.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useFrame } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Sfera = ({\n  radius,\n  widthSegments,\n  heightSegments,\n  color,\n  position,\n  infiniteRotation\n}) => {\n  _s();\n\n  const myObject = useRef();\n  useFrame(({\n    clock\n  }) => {\n    myObject.current.rotation.z = clock.getElapsedTime();\n  });\n\n  if (infiniteRotation) {\n    return /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: position,\n      ref: myObject,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [radius, widthSegments, heightSegments]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: position,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [radius, widthSegments, heightSegments]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Sfera, \"qSY6ZHuxj/hqqxV4tSgIq6Kkp2s=\", false, function () {\n  return [useFrame];\n});\n\n_c = Sfera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sfera\");","map":{"version":3,"sources":["/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/sfera.tsx"],"names":["React","useRef","useFrame","Sfera","radius","widthSegments","heightSegments","color","position","infiniteRotation","myObject","clock","current","rotation","z","getElapsedTime"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,SAAQC,QAAR,QAAuB,oBAAvB;;AAYA,OAAO,MAAMC,KAA2B,GAAG,CACvC;AAACC,EAAAA,MAAD;AAAQC,EAAAA,aAAR;AAAsBC,EAAAA,cAAtB;AAAsCC,EAAAA,KAAtC;AAA6CC,EAAAA,QAA7C;AAAuDC,EAAAA;AAAvD,CADuC,KAErC;AAAA;;AACF,QAAMC,QAAQ,GAAGT,MAAM,EAAvB;AACAC,EAAAA,QAAQ,CAAC,CAAC;AAAES,IAAAA;AAAF,GAAD,KAAe;AACpBD,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,QAAjB,CAA0BC,CAA1B,GAA8BH,KAAK,CAACI,cAAN,EAA9B;AACH,GAFO,CAAR;;AAGA,MAAGN,gBAAH,EAAoB;AAChB,wBACI;AAAM,MAAA,QAAQ,EAAED,QAAhB;AAA0B,MAAA,GAAG,EAAEE,QAA/B;AAAA,8BACI;AAAgB,QAAA,IAAI,EAAE,CAACN,MAAD,EAAQC,aAAR,EAAsBC,cAAtB;AAAtB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAmB,QAAA,KAAK,EAAEC;AAA1B;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GAPD,MAOK;AACD,wBACI;AAAM,MAAA,QAAQ,EAAEC,QAAhB;AAAA,8BACI;AAAgB,QAAA,IAAI,EAAE,CAACJ,MAAD,EAAQC,aAAR,EAAsBC,cAAtB;AAAtB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAmB,QAAA,KAAK,EAAEC;AAA1B;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;AAIJ,CAzBM;;GAAMJ,K;UAITD,Q;;;KAJSC,K","sourcesContent":["import React, {useRef} from 'react';\nimport {useFrame} from \"@react-three/fiber\";\n\ninterface SferaProps {\n    radius: number,\n    widthSegments: number,\n    heightSegments: number,\n    color: string,\n    position?: number[],\n    infiniteRotation?: boolean\n\n}\n\nexport const Sfera: React.FC<SferaProps> = (\n    {radius,widthSegments,heightSegments, color, position, infiniteRotation }\n)  => {\n    const myObject = useRef<any>();\n    useFrame(({ clock }) => {\n        myObject.current.rotation.z = clock.getElapsedTime()\n    })\n    if(infiniteRotation){\n        return(\n            <mesh position={position} ref={myObject}>\n                <sphereGeometry args={[radius,widthSegments,heightSegments]}/>\n                <meshBasicMaterial color={color}/>\n            </mesh>\n        )\n    }else{\n        return(\n            <mesh position={position}>\n                <sphereGeometry args={[radius,widthSegments,heightSegments]}/>\n                <meshBasicMaterial color={color}/>\n            </mesh>\n        )\n    }\n\n\n\n}"]},"metadata":{},"sourceType":"module"}