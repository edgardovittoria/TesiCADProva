{"ast":null,"code":"var _jsxFileName = \"/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/cube.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Cube = ({\n  color,\n  x,\n  y,\n  z,\n  position1,\n  rotationX\n}) => {\n  _s();\n\n  // const myCube = useRef<any>();\n  // useFrame(({ clock }) => {\n  //     if(rotationX !== undefined){\n  //         myCube.current.rotation.x = rotationX\n  //     }else{\n  //         myCube.current.rotation.x = clock.getElapsedTime()\n  //     }\n  // })\n  const ref = useRef();\n  const [position, setPosition] = useState([0, 0, 0]);\n  const {\n    size,\n    viewport\n  } = useThree();\n  const aspect = size.width / viewport.width;\n  useFrame(() => {\n    ref.current.rotation.z += 0.01;\n    ref.current.rotation.x += 0.01;\n  });\n  const bind = useDrag(({\n    offset: [x, y]\n  }) => {\n    const [,, z] = position;\n    setPosition([x / aspect, -y / aspect, z]);\n  }, {\n    pointerEvents: true\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: position,\n    ...bind(),\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [x, y, z]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cube, \"mzd0bbVzegpqXhFckiJ5kz2kItE=\", false, function () {\n  return [useThree, useFrame, useDrag];\n});\n\n_c = Cube;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cube\");","map":{"version":3,"sources":["/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/cube.tsx"],"names":["React","useRef","useState","useFrame","useThree","useDrag","Cube","color","x","y","z","position1","rotationX","ref","position","setPosition","size","viewport","aspect","width","current","rotation","bind","offset","pointerEvents"],"mappings":";;;AAAA,OAAOA,KAAP,IAAiCC,MAAjC,EAAyCC,QAAzC,QAAwD,OAAxD;AACA,SAAQC,QAAR,EAAkBC,QAAlB,QAAiC,oBAAjC;AACA,SAASC,OAAT,QAAwB,mBAAxB;;AAWA,OAAO,MAAMC,IAAyB,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,CAAR;AAAWC,EAAAA,CAAX;AAAcC,EAAAA,CAAd;AAAiBC,EAAAA,SAAjB;AAA4BC,EAAAA;AAA5B,CAAD,KAA4C;AAAA;;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,GAAG,GAAGZ,MAAM,EAAlB;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,CAAxC;AACA,QAAM;AAAEc,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBb,QAAQ,EAAnC;AACA,QAAMc,MAAM,GAAGF,IAAI,CAACG,KAAL,GAAaF,QAAQ,CAACE,KAArC;AACAhB,EAAAA,QAAQ,CAAC,MAAM;AACXU,IAAAA,GAAG,CAACO,OAAJ,CAAYC,QAAZ,CAAqBX,CAArB,IAA0B,IAA1B;AACAG,IAAAA,GAAG,CAACO,OAAJ,CAAYC,QAAZ,CAAqBb,CAArB,IAA0B,IAA1B;AACH,GAHO,CAAR;AAIA,QAAMc,IAAI,GAAGjB,OAAO,CAAC,CAAC;AAAEkB,IAAAA,MAAM,EAAE,CAACf,CAAD,EAAIC,CAAJ;AAAV,GAAD,KAAwB;AACzC,UAAM,IAAIC,CAAJ,IAASI,QAAf;AACAC,IAAAA,WAAW,CAAC,CAACP,CAAC,GAAGU,MAAL,EAAa,CAACT,CAAD,GAAKS,MAAlB,EAA0BR,CAA1B,CAAD,CAAX;AACH,GAHmB,EAGjB;AAAEc,IAAAA,aAAa,EAAE;AAAjB,GAHiB,CAApB;AAIA,sBACI;AAAM,IAAA,QAAQ,EAAEV,QAAhB;AAAA,OAA8BQ,IAAI,EAAlC;AAAA,4BACI;AAAa,MAAA,IAAI,EAAE,CAACd,CAAD,EAAGC,CAAH,EAAKC,CAAL;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAmB,MAAA,KAAK,EAAEH;AAA1B;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CA3BM;;GAAMD,I;UAWkBF,Q,EAE3BD,Q,EAIaE,O;;;KAjBJC,I","sourcesContent":["import React, {MutableRefObject, useRef, useState} from 'react';\nimport {useFrame, useThree} from \"@react-three/fiber\";\nimport { useDrag } from \"react-use-gesture\"\n\ninterface CubeProps {\n    color: string,\n    x: number,\n    y: number,\n    z: number,\n    position1?: number[],\n    rotationX?: number\n}\n\nexport const Cube: React.FC<CubeProps> = ({color, x, y, z, position1, rotationX}) => {\n    // const myCube = useRef<any>();\n    // useFrame(({ clock }) => {\n    //     if(rotationX !== undefined){\n    //         myCube.current.rotation.x = rotationX\n    //     }else{\n    //         myCube.current.rotation.x = clock.getElapsedTime()\n    //     }\n    // })\n    const ref = useRef<any>();\n    const [position, setPosition] = useState([0, 0, 0]);\n    const { size, viewport } = useThree();\n    const aspect = size.width / viewport.width;\n    useFrame(() => {\n        ref.current.rotation.z += 0.01\n        ref.current.rotation.x += 0.01\n    });\n    const bind = useDrag(({ offset: [x, y] }) => {\n        const [,, z] = position;\n        setPosition([x / aspect, -y / aspect, z]);\n    }, { pointerEvents: true });\n    return(\n        <mesh position={position} {...bind()}>\n            <boxGeometry args={[x,y,z]}/>\n            <meshBasicMaterial color={color}/>\n        </mesh>\n    )\n}"]},"metadata":{},"sourceType":"module"}