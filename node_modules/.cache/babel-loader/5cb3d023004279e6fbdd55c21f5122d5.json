{"ast":null,"code":"var _jsxFileName = \"/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/cube.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Cube = ({\n  color,\n  x,\n  y,\n  z,\n  position,\n  rotationX\n}) => {\n  //animation\n  // const myCube = useRef<any>();\n  // useFrame(({ clock }) => {\n  //     if(rotationX !== undefined){\n  //         myCube.current.rotation.x = rotationX\n  //     }else{\n  //         myCube.current.rotation.x = clock.getElapsedTime()\n  //     }\n  // })\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [x, y, z]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_c = Cube;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cube\");","map":{"version":3,"sources":["/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/cube.tsx"],"names":["React","Cube","color","x","y","z","position","rotationX"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAWA,OAAO,MAAMC,IAAyB,GAAG,CACrC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,CAAR;AAAWC,EAAAA,CAAX;AAAcC,EAAAA,CAAd;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA;AAA3B,CADqC,KAEpC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBACI;AAAA,4BACI;AAAa,MAAA,IAAI,EAAE,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAsB,MAAA,KAAK,EAAEH;AAA7B;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAlBM;KAAMD,I","sourcesContent":["import React from 'react';\n\ninterface CubeProps {\n    color: string,\n    x: number,\n    y: number,\n    z: number,\n    position: number[],\n    rotationX?: number\n}\n\nexport const Cube: React.FC<CubeProps> = (\n    {color, x, y, z, position, rotationX}\n) => {\n    //animation\n    // const myCube = useRef<any>();\n    // useFrame(({ clock }) => {\n    //     if(rotationX !== undefined){\n    //         myCube.current.rotation.x = rotationX\n    //     }else{\n    //         myCube.current.rotation.x = clock.getElapsedTime()\n    //     }\n    // })\n    return(\n        <mesh>\n            <boxGeometry args={[x, y, z]} />\n            <meshStandardMaterial color={color} />\n        </mesh>\n    )\n}"]},"metadata":{},"sourceType":"module"}