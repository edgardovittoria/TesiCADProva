{"ast":null,"code":"var _jsxFileName = \"/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/canvas/components/sfera.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { useRotation } from \"../../../hooks/useRotation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Sfera = ({\n  radius,\n  widthSegments,\n  heightSegments,\n  color,\n  position,\n  children,\n  hasRotation = false\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const myObject = useRef();\n  useRotation(myObject, false, true, false, hasRotation);\n\n  function useDrag(onDrag, onEnd) {\n    _s();\n\n    const [active, setActive] = useState(false);\n    const [, toggle] = useContext(camContext);\n    const activeRef = useRef();\n    const down = useCallback(e => (setActive(true), toggle(false), e.stopPropagation(), e.target.setPointerCapture(e.pointerId)), [toggle]);\n    const up = useCallback(e => (setActive(false), toggle(true), e.target.releasePointerCapture(e.pointerId), onEnd && onEnd()), [onEnd, toggle]);\n    const move = useCallback(event => activeRef.current && (event.stopPropagation(), onDrag(event.unprojectedPoint)), [onDrag]);\n    useEffect(() => void (activeRef.current = active));\n    return {\n      onPointerDown: down,\n      onPointerUp: up,\n      onPointerMove: move\n    };\n  }\n\n  _s(useDrag, \"TAQus1ERG7oztSuyx/rThgJaGfg=\");\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: myObject,\n    ...bind,\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [radius, widthSegments, heightSegments]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"meshToonMaterial\", {\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), children === undefined ? /*#__PURE__*/_jsxDEV(\"mesh\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 44\n    }, this) : children.map(child => {\n      return child;\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Sfera, \"1/k0Wh0ZZxmiEkEH8LeFX4np4Mw=\", false, function () {\n  return [useRotation];\n});\n\n_c = Sfera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sfera\");","map":{"version":3,"sources":["/home/edgardo/WebstormProjects/prova-react-three-fiber/src/components/canvas/components/sfera.tsx"],"names":["React","useCallback","useContext","useEffect","useRef","useState","useRotation","Sfera","radius","widthSegments","heightSegments","color","position","children","hasRotation","myObject","useDrag","onDrag","onEnd","active","setActive","toggle","camContext","activeRef","down","e","stopPropagation","target","setPointerCapture","pointerId","up","releasePointerCapture","move","event","current","unprojectedPoint","onPointerDown","onPointerUp","onPointerMove","bind","undefined","map","child"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,MAAnD,EAA2DC,QAA3D,QAA0E,OAA1E;AACA,SAAQC,WAAR,QAA0B,4BAA1B;;AAYA,OAAO,MAAMC,KAA2B,GAAG,CACvC;AAACC,EAAAA,MAAD;AAAQC,EAAAA,aAAR;AAAsBC,EAAAA,cAAtB;AAAsCC,EAAAA,KAAtC;AAA6CC,EAAAA,QAA7C;AAAuDC,EAAAA,QAAvD;AAAiEC,EAAAA,WAAW,GAAG;AAA/E,CADuC,KAErC;AAAA;;AAAA;;AACF,QAAMC,QAAQ,GAAGX,MAAM,EAAvB;AAEAE,EAAAA,WAAW,CAACS,QAAD,EAAW,KAAX,EAAkB,IAAlB,EAAwB,KAAxB,EAA+BD,WAA/B,CAAX;;AAEA,WAASE,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgC;AAAA;;AAC5B,UAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;AACA,UAAM,GAAGgB,MAAH,IAAanB,UAAU,CAACoB,UAAD,CAA7B;AACA,UAAMC,SAAS,GAAGnB,MAAM,EAAxB;AACA,UAAMoB,IAAI,GAAGvB,WAAW,CAAEwB,CAAD,KAAQL,SAAS,CAAC,IAAD,CAAT,EAAiBC,MAAM,CAAC,KAAD,CAAvB,EAAgCI,CAAC,CAACC,eAAF,EAAhC,EAAqDD,CAAC,CAACE,MAAF,CAASC,iBAAT,CAA2BH,CAAC,CAACI,SAA7B,CAA7D,CAAD,EAAwG,CAACR,MAAD,CAAxG,CAAxB;AACA,UAAMS,EAAE,GAAG7B,WAAW,CAAEwB,CAAD,KAAQL,SAAS,CAAC,KAAD,CAAT,EAAkBC,MAAM,CAAC,IAAD,CAAxB,EAAgCI,CAAC,CAACE,MAAF,CAASI,qBAAT,CAA+BN,CAAC,CAACI,SAAjC,CAAhC,EAA6EX,KAAK,IAAIA,KAAK,EAAnG,CAAD,EAAyG,CAACA,KAAD,EAAQG,MAAR,CAAzG,CAAtB;AACA,UAAMW,IAAI,GAAG/B,WAAW,CAAEgC,KAAD,IAAWV,SAAS,CAACW,OAAV,KAAsBD,KAAK,CAACP,eAAN,IAAyBT,MAAM,CAACgB,KAAK,CAACE,gBAAP,CAArD,CAAZ,EAA4F,CAAClB,MAAD,CAA5F,CAAxB;AACAd,IAAAA,SAAS,CAAC,MAAM,MAAMoB,SAAS,CAACW,OAAV,GAAoBf,MAA1B,CAAP,CAAT;AACA,WAAO;AAAEiB,MAAAA,aAAa,EAAEZ,IAAjB;AAAuBa,MAAAA,WAAW,EAAEP,EAApC;AAAwCQ,MAAAA,aAAa,EAAEN;AAAvD,KAAP;AACH;;AAdC,KAKOhB,OALP;;AAgBF,sBAEI;AAAM,IAAA,GAAG,EAAED,QAAX;AAAA,OAAyBwB,IAAzB;AAAA,4BACI;AAAgB,MAAA,IAAI,EAAE,CAAC/B,MAAD,EAAQC,aAAR,EAAsBC,cAAtB;AAAtB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAkB,MAAA,KAAK,EAAEC;AAAzB;AAAA;AAAA;AAAA;AAAA,YAFJ,EAISE,QAAQ,KAAK2B,SAAd,gBAA2B;AAAA;AAAA;AAAA;AAAA,YAA3B,GAA2C3B,QAAQ,CAAC4B,GAAT,CAAaC,KAAK,IAAI;AACjE,aAAOA,KAAP;AACH,KAF8C,CAJnD;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAYH,CA9BM;;IAAMnC,K;UAKTD,W;;;KALSC,K","sourcesContent":["import React, {useCallback, useContext, useEffect, useRef, useState} from 'react';\nimport {useRotation} from \"../../../hooks/useRotation\";\n\ninterface SferaProps {\n    radius: number,\n    widthSegments: number,\n    heightSegments: number,\n    color: string,\n    position?: number[],\n    hasRotation?: boolean ,\n    children?: JSX.Element[]\n}\n\nexport const Sfera: React.FC<SferaProps> = (\n    {radius,widthSegments,heightSegments, color, position, children, hasRotation = false }\n)  => {\n    const myObject = useRef<any>();\n\n    useRotation(myObject, false, true, false, hasRotation)\n\n    function useDrag(onDrag, onEnd) {\n        const [active, setActive] = useState(false)\n        const [, toggle] = useContext(camContext)\n        const activeRef = useRef()\n        const down = useCallback((e) => (setActive(true), toggle(false), e.stopPropagation(), e.target.setPointerCapture(e.pointerId)), [toggle])\n        const up = useCallback((e) => (setActive(false), toggle(true), e.target.releasePointerCapture(e.pointerId), onEnd && onEnd()), [onEnd, toggle])\n        const move = useCallback((event) => activeRef.current && (event.stopPropagation(), onDrag(event.unprojectedPoint)), [onDrag])\n        useEffect(() => void (activeRef.current = active))\n        return { onPointerDown: down, onPointerUp: up, onPointerMove: move }\n    }\n\n    return(\n\n        <mesh ref={myObject} {...bind}>\n            <sphereGeometry args={[radius,widthSegments,heightSegments]}/>\n            <meshToonMaterial color={color}/>\n            {\n                (children === undefined) ? <mesh></mesh> : children.map(child => {\n                return child;\n            })}\n        </mesh>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}